@startuml
abstract class Field
abstract class Property
interface IO
class FileReader
class DBConnector
Main *-- IO
Main "1" *-- "2...6" BankAccount : has
Main "1" *-- "1" UI : has
Main *-- Board : has
Player *-- BankAccount : has
Field <|-- Consequence : is-a
Field <|-- Property : is-a

Board *-- Field : has
Consequence <|-- Tax : is-a
Consequence <|-- Start : is-a
Property <|-- Plot : is-a
Property <|-- Business : is-a
Property <|-- Business : is-a
IO <|-- FileReader: implements
IO <|-- DBConnector: implements


Main : static UI ui
Main : static IO io
Main : static Board board
Main : static ArrayList<Player> players
Main : static Player currentPlayer
Main : static final int MAX

Main : static main(String[] args)
Main : static runLoop()
Main : static takeTurn()
Main : static printAccounts()
Main : static saveGamedata()
Main : static doTurn()



Board : ArrayList<Field> fields
Board : Dice dice

BankAccount : BankAccount(String owner, float balance)
BankAccount : String owner
BankAccount : float balance
BankAccount : float[] transactions

BankAccount : String toString()
BankAccount : void withdrawAmount(int amount)
BankAccount : float getBalance()

UI : void createAccounts()
UI : String getUserInput(String msg)

Field : - String label
Field : - int id
Field : - int cost
Field : - int income
Field : + String onLand()
Field : + void processResponse()
Field : + String toString()

Property : int seriesID
Property : String onLand()
Property : onAccept()
Property : onReject()
Property : + String toString()



Consequence : onAccept()
Consequence : onReject()
Consequence : + String toString()

Player : BankAccount account
Player : Player(String name, int balance)
Player : handleMoney()
Player : updatePosition()

IO : readGameData()
IO : readFieldData()
IO : saveGamedata()
@enduml



